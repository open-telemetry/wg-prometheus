// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package configmanager

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ConfigManagerServiceClient is the client API for ConfigManagerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ConfigManagerServiceClient interface {
	UpdatePrometheusFileSD(ctx context.Context, in *UpdatePrometheusFileSDReq, opts ...grpc.CallOption) (*UpdatePrometheusFileSDRRes, error)
	GetPrometheusFileSD(ctx context.Context, in *GetPrometheusFileSDReq, opts ...grpc.CallOption) (*GetPrometheusFileSDRes, error)
}

type configManagerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewConfigManagerServiceClient(cc grpc.ClientConnInterface) ConfigManagerServiceClient {
	return &configManagerServiceClient{cc}
}

func (c *configManagerServiceClient) UpdatePrometheusFileSD(ctx context.Context, in *UpdatePrometheusFileSDReq, opts ...grpc.CallOption) (*UpdatePrometheusFileSDRRes, error) {
	out := new(UpdatePrometheusFileSDRRes)
	err := c.cc.Invoke(ctx, "/otel.clb.configmanager.ConfigManagerService/UpdatePrometheusFileSD", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configManagerServiceClient) GetPrometheusFileSD(ctx context.Context, in *GetPrometheusFileSDReq, opts ...grpc.CallOption) (*GetPrometheusFileSDRes, error) {
	out := new(GetPrometheusFileSDRes)
	err := c.cc.Invoke(ctx, "/otel.clb.configmanager.ConfigManagerService/GetPrometheusFileSD", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ConfigManagerServiceServer is the server API for ConfigManagerService service.
// All implementations must embed UnimplementedConfigManagerServiceServer
// for forward compatibility
type ConfigManagerServiceServer interface {
	UpdatePrometheusFileSD(context.Context, *UpdatePrometheusFileSDReq) (*UpdatePrometheusFileSDRRes, error)
	GetPrometheusFileSD(context.Context, *GetPrometheusFileSDReq) (*GetPrometheusFileSDRes, error)
	mustEmbedUnimplementedConfigManagerServiceServer()
}

// UnimplementedConfigManagerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedConfigManagerServiceServer struct {
}

func (UnimplementedConfigManagerServiceServer) UpdatePrometheusFileSD(context.Context, *UpdatePrometheusFileSDReq) (*UpdatePrometheusFileSDRRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePrometheusFileSD not implemented")
}
func (UnimplementedConfigManagerServiceServer) GetPrometheusFileSD(context.Context, *GetPrometheusFileSDReq) (*GetPrometheusFileSDRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPrometheusFileSD not implemented")
}
func (UnimplementedConfigManagerServiceServer) mustEmbedUnimplementedConfigManagerServiceServer() {}

// UnsafeConfigManagerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ConfigManagerServiceServer will
// result in compilation errors.
type UnsafeConfigManagerServiceServer interface {
	mustEmbedUnimplementedConfigManagerServiceServer()
}

func RegisterConfigManagerServiceServer(s grpc.ServiceRegistrar, srv ConfigManagerServiceServer) {
	s.RegisterService(&ConfigManagerService_ServiceDesc, srv)
}

func _ConfigManagerService_UpdatePrometheusFileSD_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePrometheusFileSDReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigManagerServiceServer).UpdatePrometheusFileSD(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/otel.clb.configmanager.ConfigManagerService/UpdatePrometheusFileSD",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigManagerServiceServer).UpdatePrometheusFileSD(ctx, req.(*UpdatePrometheusFileSDReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigManagerService_GetPrometheusFileSD_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPrometheusFileSDReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigManagerServiceServer).GetPrometheusFileSD(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/otel.clb.configmanager.ConfigManagerService/GetPrometheusFileSD",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigManagerServiceServer).GetPrometheusFileSD(ctx, req.(*GetPrometheusFileSDReq))
	}
	return interceptor(ctx, in, info, handler)
}

// ConfigManagerService_ServiceDesc is the grpc.ServiceDesc for ConfigManagerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ConfigManagerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "otel.clb.configmanager.ConfigManagerService",
	HandlerType: (*ConfigManagerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdatePrometheusFileSD",
			Handler:    _ConfigManagerService_UpdatePrometheusFileSD_Handler,
		},
		{
			MethodName: "GetPrometheusFileSD",
			Handler:    _ConfigManagerService_GetPrometheusFileSD_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "configmanager/configmanager.proto",
}
